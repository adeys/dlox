// Library lox:collections

native class List {
    construct() {
        this._store = Array();
    }

    static from(array) {
        let list = List();
        list._store = array;
        return list;
    }

    push(value) {
        this._store.add(value);
    }

    pop() {
        return this._store.remove(this._store.length - 1);
    }

    get(index) {
        return this._store.get(index);
    }

    foreach(func) {
        for(let i = 0; i < this._store.length; i = i + 1) {
            func(this.get(i));
        }
    }

    map(func) {
        let list = List();
        
        this.foreach(fun (item) {
            list.push(func(item));
        });

        return list;
    }

    last {
        return this.get(this._store.length - 1);
    }

    first {
        return this.get(0);
    }

    size {
        return this._store.length;
    }
}

native class Map {
    construct() {
        this._keys = Array();
        this._items = Array();
        this._size = 0;
    }

    // Look for given key in map, return value or nil.
    get(key) {
        let id = this._findIndex(key);
        return id == -1 ? nil : this._items.get(id);
    }

    // Set given key to value in map. Overwrite if an item with the
    // given key already exists.
    set(key, value) {
        let id = this._findIndex(key);
        if (id == -1) {
            this._keys.add(key);
            this._items.add(value);
            this._size = this.size + 1;
        } else {
            this._items.set(id, value);
        }
    }

    _findIndex(key) {
        let id = -1;

        for(let i = 0; i < this._size; i = i + 1) {
            if (this._keys.get(i) == key) {
                return i;
                break;
            }
        }

        return id;
    }

    size { return this._size; }
}