// Library lox:core

class Error {
    construct(msg, code) {
        this.message = msg;
        this.code = code;
        this.type = "Error";
    }
}

class RuntimeError : Error {
    construct(msg) {
        super.construct(msg, 128);
        this.type = "Runtime Error";
    }
}

class AssertionError : Error {
    construct(msg) {
        super.construct(msg, 256);
        this.type = "Assertion Error";
    }
}

fun throw(err) {
    error(err.type + " : " + err.message);
    exit(err.code);
}

fun assert(cond, error) {
    if (!cond) throw(AssertionError(error));
}

fun is(var, type) {
    return typeof(var) == type;
}

fun instanceOf(object, className) {
    assert(is(object, "object"), "Parameter 1 to 'instanceOf' must be of type 'object'.");
    assert(is(className, "string", "Parameter 2 must be of type 'string'."));

    return object.__type.indexOf(className) != -1;
}