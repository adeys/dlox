// Library lox:fs

import "lox:assert";
import "lox:collections";

native class Path {
    native resolve(path, isDir);
}


native class Stat {
    native static exists(path, isDir);

    native static isFile(path);

    native static isDirectory(path);

    native static size(path);
}

native class File {
    construct(path) {
        assert(is(path, "string"), "Parameter to File constructor must be of type string.");

        this._path = Path.resolve(path, false);
    }

    exists() {
        return Stat.exists(this._path, false);
    }

    write(content, erase) {
        if (this.exists()) {
            return this._write(content, erase);
        }

        return false;
    }

    read() {
        if (this.exists()) {
            return this._read();   
        }

        return nil;
    }

    rename(name) {
        if (this.exists()) {
            assert(is(name, "string"), "File name must be of type string.");
            if(name = this._rename(name)) {
                this._path = name;
                return true;
            }
        }

        return false;
    }

    copy(location) {
        if (this.exists()) {
            assert(is(location, "string"), "File name must be of type string.");
            let to = File(location);
            if (this._copy(to.path)) {
                return to;
            }

            return nil;
        }

        return nil;
    }

    create() {
        return this._create();
    }

    delete() {
        if (this.exists()) {
            return this._delete();
        }

        return false;
    }

    path {
        return this._path;
    }

    native _read();

    native _write(content, erase);

    native _copy(to);

    native _rename(to);

    native _create();

    native _delete();
}

native class Directory {
    construct(path) {
        this._files = nil;
        this._path = Path.resolve(path, true);
    }

    exists() {
        return Stat.exists(this._path, true);
    }

    list() {
        if (this.exists()) {
            if (this._files != nil) {
                return this._files;
            }

            this._files = this._list();
            return this._files;
        }

        return nil;
    }

    native _list();
}
