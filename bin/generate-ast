#! /usr/bin/dart

import '../tool/AstGenerator.dart';
import 'dart:io';

main(List<String> argv) {
	if (argv.length != 1) {
		print("Usage: generate <outdir>");
		exit(1);
	} else {
		String dir = argv[0];
		AstGenerator gen = new AstGenerator('$dir/expr.dart');

		String base = 'Expr';
		List<String> types = [
			"Assign : Token name, Expr value",
			"Binary : Expr left, Token op, Expr right",
			"Call : Expr callee, Token paren, List<Expr> arguments",
			"Get : Expr object, Token name",
			"Grouping : Expr expr",
			"Literal : Object value",
			"Logical : Expr left, Token opt, Expr right",
			"Set : Expr object, Token name, Expr value",
			"This : Token keyword",
			"Unary : Token op, Expr right",
			"Variable : Token name"
		];
		StringBuffer buffer = new StringBuffer();

		gen.defineExpr(buffer, base, types);
		gen.defineVisitor(buffer, base, types);

		print('Generating ast file $dir/expr.dart...');
		gen.generate(buffer);
		print('Generated ast file $dir/expr.dart...');

		// Generate statements
		gen = new AstGenerator('$dir/stmt.dart');

		base = 'Stmt';
		types = [
			"Block : List<Stmt> statements",
			"Class : Token name, List<FunctionStmt> methods",
			"Expression : Expr expression",
			"Function : Token name, List<Token> params, List<Stmt> body",
			"If : Expr condition, Stmt thenStmt, Stmt elseStmt",
			"Print : Expr expression",
			"Return : Token keyword, Expr value",
			"Var : Token name, Expr initializer",
			"While : Expr condition, Stmt body"
		];
		buffer.clear();

		gen.defineExpr(buffer, base, types);
		gen.defineVisitor(buffer, base, types);

		print('Generating statement file $dir/stmt.dart...');
		gen.generate(buffer);
		print('Generated statement file $dir/stmt.dart...');
	}
}